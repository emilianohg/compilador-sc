
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 28 00:52:58 MST 2022
//----------------------------------------------------

package Sintactico;

import java_cup.runtime.*;
import Lexico.PaintTextBox;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 28 00:52:58 MST 2022
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\011\005\000\002\033\004\000\002\034" +
    "\006\000\002\035\005\000\002\035\003\000\002\013\004" +
    "\000\002\013\004\000\002\016\006\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\005\004\000\002" +
    "\005\004\000\002\007\005\000\002\007\005\000\002\040" +
    "\004\000\002\040\010\000\002\040\006\000\002\040\004" +
    "\000\002\040\003\000\002\010\005\000\002\010\007\000" +
    "\002\010\003\000\002\012\006\000\002\037\005\000\002" +
    "\037\004\000\002\006\005\000\002\006\003\000\002\014" +
    "\007\000\002\014\011\000\002\014\010\000\002\015\005" +
    "\000\002\015\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\020\015" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\004\000\002\022\005\000\002\023\005\000\002" +
    "\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\016\004\016\005\007\007\012\020\010\022" +
    "\015\041\006\001\002\000\004\002\204\001\002\000\010" +
    "\040\203\042\133\044\037\001\002\000\004\007\201\001" +
    "\002\000\004\014\152\001\002\000\004\007\012\001\002" +
    "\000\004\011\130\001\002\000\012\011\uffd9\040\uffd9\042" +
    "\uffd9\044\uffd9\001\002\000\004\011\127\001\002\000\020" +
    "\002\000\004\016\005\007\007\012\020\010\022\015\041" +
    "\006\001\002\000\004\014\120\001\002\000\004\007\012" +
    "\001\002\000\004\011\034\001\002\000\004\011\033\001" +
    "\002\000\004\011\032\001\002\000\022\002\ufffe\004\ufffe" +
    "\005\ufffe\007\ufffe\017\ufffe\020\ufffe\022\ufffe\041\ufffe\001" +
    "\002\000\004\011\031\001\002\000\004\011\030\001\002" +
    "\000\022\002\ufff8\004\ufff8\005\ufff8\007\ufff8\017\ufff8\020" +
    "\ufff8\022\ufff8\041\ufff8\001\002\000\004\011\027\001\002" +
    "\000\022\002\ufffd\004\ufffd\005\ufffd\007\ufffd\017\ufffd\020" +
    "\ufffd\022\ufffd\041\ufffd\001\002\000\022\002\ufff5\004\ufff5" +
    "\005\ufff5\007\ufff5\017\ufff5\020\ufff5\022\ufff5\041\ufff5\001" +
    "\002\000\022\002\ufff9\004\ufff9\005\ufff9\007\ufff9\017\ufff9" +
    "\020\ufff9\022\ufff9\041\ufff9\001\002\000\022\002\ufff7\004" +
    "\ufff7\005\ufff7\007\ufff7\017\ufff7\020\ufff7\022\ufff7\041\ufff7" +
    "\001\002\000\022\002\ufffb\004\ufffb\005\ufffb\007\ufffb\017" +
    "\ufffb\020\ufffb\022\ufffb\041\ufffb\001\002\000\022\002\ufff6" +
    "\004\ufff6\005\ufff6\007\ufff6\017\ufff6\020\ufff6\022\ufff6\041" +
    "\ufff6\001\002\000\004\011\uffe8\001\002\000\010\011\uffe9" +
    "\040\040\044\037\001\002\000\004\007\117\001\002\000" +
    "\016\007\050\010\045\012\043\013\052\014\053\045\054" +
    "\001\002\000\022\011\uffde\014\uffde\015\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\043\uffde\001\002\000\026\011\uffd1" +
    "\014\uffd1\015\uffd1\017\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\044\uffd1\001\002\000\026\011\uffd2\014\uffd2" +
    "\015\uffd2\017\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\044\uffd2\001\002\000\016\011\uffe1\014\uffe1\034\065" +
    "\035\064\036\062\037\063\001\002\000\026\011\uffd3\014" +
    "\uffd3\015\uffd3\017\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\044\uffd3\001\002\000\006\011\uffe6\014\057\001" +
    "\002\000\014\011\uffe7\034\065\035\064\036\062\037\063" +
    "\001\002\000\030\011\uffd0\014\uffd0\015\uffd0\017\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\042\105\044\uffd0" +
    "\001\002\000\026\011\uffcf\014\uffcf\015\uffcf\017\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\044\uffcf\001\002" +
    "\000\026\011\uffce\014\uffce\015\uffce\017\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\044\uffce\001\002\000\016" +
    "\007\050\010\045\012\043\013\052\014\057\045\054\001" +
    "\002\000\026\011\uffcd\014\uffcd\015\uffcd\017\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\044\uffcd\001\002\000" +
    "\012\034\065\035\064\036\062\037\063\001\002\000\012" +
    "\034\065\035\064\036\062\037\063\001\002\000\016\007" +
    "\050\010\045\012\043\013\052\014\057\045\054\001\002" +
    "\000\012\034\065\035\064\036\062\037\063\001\002\000" +
    "\014\007\050\010\045\012\043\013\052\045\054\001\002" +
    "\000\016\007\uffca\010\uffca\012\uffca\013\uffca\014\uffca\045" +
    "\uffca\001\002\000\016\007\uffc9\010\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\045\uffc9\001\002\000\016\007\uffcb\010\uffcb\012" +
    "\uffcb\013\uffcb\014\uffcb\045\uffcb\001\002\000\016\007\uffcc" +
    "\010\uffcc\012\uffcc\013\uffcc\014\uffcc\045\uffcc\001\002\000" +
    "\014\015\070\034\065\035\064\036\062\037\063\001\002" +
    "\000\014\007\050\010\045\012\043\013\052\045\054\001" +
    "\002\000\022\011\uffdd\014\uffdd\015\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\043\uffdd\001\002\000\020\011\uffdc\014" +
    "\uffdc\015\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\001\002" +
    "\000\020\011\uffdb\014\uffdb\015\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\001\002\000\014\015\070\034\065\035\064" +
    "\036\062\037\063\001\002\000\016\007\050\010\045\012" +
    "\043\013\052\014\057\045\054\001\002\000\014\015\077" +
    "\034\065\035\064\036\062\037\063\001\002\000\004\014" +
    "\100\001\002\000\006\011\uffe4\014\uffe4\001\002\000\014" +
    "\007\050\010\045\012\043\013\052\045\054\001\002\000" +
    "\022\011\uffe0\014\uffe0\015\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\043\uffe0\001\002\000\004\014\100\001\002\000" +
    "\014\015\104\034\uffe0\035\uffe0\036\uffe0\037\uffe0\001\002" +
    "\000\022\011\uffdf\014\uffdf\015\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\043\uffdf\001\002\000\010\007\110\010\106" +
    "\014\057\001\002\000\004\043\uffec\001\002\000\004\043" +
    "\112\001\002\000\004\043\uffeb\001\002\000\014\034\065" +
    "\035\064\036\062\037\063\043\uffea\001\002\000\026\011" +
    "\uffed\014\uffed\015\uffed\017\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\044\uffed\001\002\000\016\011\uffe2\014" +
    "\uffe2\034\065\035\064\036\062\037\063\001\002\000\016" +
    "\007\050\010\045\012\043\013\052\014\057\045\054\001" +
    "\002\000\016\011\uffe3\014\uffe3\034\065\035\064\036\062" +
    "\037\063\001\002\000\016\011\uffe5\014\uffe5\034\065\035" +
    "\064\036\062\037\063\001\002\000\012\011\uffda\040\uffda" +
    "\042\uffda\044\uffda\001\002\000\014\007\050\010\045\012" +
    "\043\013\052\045\054\001\002\000\006\015\124\044\123" +
    "\001\002\000\006\015\ufff0\044\ufff0\001\002\000\014\007" +
    "\050\010\045\012\043\013\052\045\054\001\002\000\004" +
    "\011\ufff2\001\002\000\006\015\ufff1\044\ufff1\001\002\000" +
    "\022\002\uffff\004\uffff\005\uffff\007\uffff\017\uffff\020\uffff" +
    "\022\uffff\041\uffff\001\002\000\022\002\ufffa\004\ufffa\005" +
    "\ufffa\007\ufffa\017\ufffa\020\ufffa\022\ufffa\041\ufffa\001\002" +
    "\000\022\002\ufffc\004\ufffc\005\ufffc\007\ufffc\017\ufffc\020" +
    "\ufffc\022\ufffc\041\ufffc\001\002\000\004\011\uffee\001\002" +
    "\000\012\011\uffef\040\134\042\133\044\037\001\002\000" +
    "\004\010\146\001\002\000\004\016\135\001\002\000\014" +
    "\007\050\010\045\012\043\013\052\045\054\001\002\000" +
    "\016\017\142\034\065\035\064\036\062\037\063\044\141" +
    "\001\002\000\016\017\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\044\uffd4\001\002\000\014\007\050\010\045\012\043" +
    "\013\052\045\054\001\002\000\014\007\050\010\045\012" +
    "\043\013\052\045\054\001\002\000\004\011\uffd8\001\002" +
    "\000\016\017\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\044" +
    "\uffd5\001\002\000\006\017\145\044\141\001\002\000\004" +
    "\011\uffd7\001\002\000\004\043\147\001\002\000\004\040" +
    "\150\001\002\000\014\007\050\010\045\012\043\013\052" +
    "\045\054\001\002\000\004\011\uffd6\001\002\000\016\007" +
    "\050\010\045\012\043\013\052\014\160\045\054\001\002" +
    "\000\006\014\160\015\170\001\002\000\006\014\uffc5\015" +
    "\uffc5\001\002\000\006\014\uffc7\015\uffc7\001\002\000\010" +
    "\014\uffc6\015\uffc6\033\165\001\002\000\004\033\163\001" +
    "\002\000\014\007\050\010\045\012\043\013\052\045\054" +
    "\001\002\000\004\015\162\001\002\000\010\014\uffc2\015" +
    "\uffc2\033\uffc2\001\002\000\014\007\050\010\045\012\043" +
    "\013\052\045\054\001\002\000\006\014\uffc1\015\uffc1\001" +
    "\002\000\004\014\160\001\002\000\006\014\uffc3\015\uffc3" +
    "\001\002\000\006\014\uffc4\015\uffc4\001\002\000\004\016" +
    "\172\001\002\000\004\033\165\001\002\000\016\004\016" +
    "\005\007\007\012\020\010\022\015\041\006\001\002\000" +
    "\020\004\016\005\007\007\012\017\174\020\010\022\015" +
    "\041\006\001\002\000\004\006\175\001\002\000\004\016" +
    "\176\001\002\000\016\004\016\005\007\007\012\020\010" +
    "\022\015\041\006\001\002\000\020\004\016\005\007\007" +
    "\012\017\200\020\010\022\015\041\006\001\002\000\004" +
    "\011\uffc8\001\002\000\004\011\202\001\002\000\022\002" +
    "\ufff4\004\ufff4\005\ufff4\007\ufff4\017\ufff4\020\ufff4\022\ufff4" +
    "\041\ufff4\001\002\000\020\007\050\010\045\012\043\013" +
    "\052\014\053\016\135\045\054\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\034\002\003\003\013\004\021\005\010\006" +
    "\004\007\017\011\024\013\012\014\022\020\020\025\016" +
    "\026\023\034\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\131" +
    "\014\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\125\005\010\006\004\007\017" +
    "\011\024\013\012\014\022\020\020\025\016\026\023\034" +
    "\025\001\001\000\002\001\001\000\006\006\035\007\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\043\012\040\016\041" +
    "\027\046\036\050\040\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\075\001\001" +
    "\000\002\001\001\000\006\010\115\012\040\001\001\000" +
    "\006\030\060\037\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\054\012\040\016" +
    "\041\027\055\036\050\001\001\000\002\001\001\000\004" +
    "\030\101\001\001\000\006\030\060\037\072\001\001\000" +
    "\014\010\054\012\040\016\041\027\057\036\050\001\001" +
    "\000\006\030\060\037\065\001\001\000\010\016\041\027" +
    "\071\036\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\066\001" +
    "\001\000\010\016\041\027\070\036\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\073\001\001\000\014\010\074\012\040\016\041\027\070" +
    "\036\050\001\001\000\004\030\075\001\001\000\004\012" +
    "\100\001\001\000\002\001\001\000\010\016\041\027\057" +
    "\036\050\001\001\000\002\001\001\000\004\012\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\110" +
    "\012\040\017\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\075\001\001\000\002" +
    "\001\001\000\004\030\113\001\001\000\014\010\114\012" +
    "\040\016\041\027\070\036\050\001\001\000\004\030\075" +
    "\001\001\000\004\030\075\001\001\000\002\001\001\000" +
    "\012\016\041\027\121\035\120\036\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\041\027\124\036" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\135\016\041\027\136\036\050\001\001\000" +
    "\004\030\137\001\001\000\002\001\001\000\012\015\143" +
    "\016\041\027\136\036\050\001\001\000\010\016\041\027" +
    "\142\036\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\041\027\150\036\050\001\001" +
    "\000\002\001\001\000\020\016\041\021\152\022\154\023" +
    "\155\024\153\027\156\036\050\001\001\000\006\022\166" +
    "\023\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\041\024\160" +
    "\027\156\036\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\041\027\163\036\050\001\001\000\002" +
    "\001\001\000\004\023\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\172\004\021\005\010\006\004\007\017\011\024\013" +
    "\012\014\022\020\020\025\016\026\023\034\025\001\001" +
    "\000\030\004\125\005\010\006\004\007\017\011\024\013" +
    "\012\014\022\020\020\025\016\026\023\034\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\176\004" +
    "\021\005\010\006\004\007\017\011\024\013\012\014\022" +
    "\020\020\025\016\026\023\034\025\001\001\000\030\004" +
    "\125\005\010\006\004\007\017\011\024\013\012\014\022" +
    "\020\020\025\016\026\023\034\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\043" +
    "\012\040\016\041\027\046\036\050\040\045\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol simboloAnterior;
    public Nodo nodoPrincipal;
    public PaintTextBox estilo = new PaintTextBox();
    private int guia = 0;
    private int conError = 0;
    public String textError = "";
    private int charError = 0;
    
    private int charCode = 0;
    public int charErrorDetec(){
        return charCode;
    }
    private void getGuia(){
        guia++;
    }

    

     public void syntax_error(Symbol cur_token) {
        //report_error("Syntax error", cur_token); 
        
        if(cur_token.sym != 0){
            Scanner s = getScanner();
        
        
        report_error("Syntax error", cur_token); 
        this.charCode = cur_token.left;
        
        conError++;

        String m = "Error "+conError+": \n";
        int l = cur_token.right;
        String v = cur_token.value.toString();

        textError += m+"\tLinea: "+l+"\n\tCerca de: "+v+"\n";

        int tam =textError.length();
        estilo.insertarCodigo(textError);        
        estilo.pintaRojoFuerte(charError,tam);

        charError += tam;
        }

    }

     
/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION_BAJA ::= TIPO_VALOR OPER_REL TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICION_BAJA","",parser.guia);        
        getGuia();

        Nodo nd1 = new Nodo("OPER_REL",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<CONDICION_BAJA>TIPO_VALOR OPER_REL TIPO_VALOR");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_BAJA",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION_MEDIA ::= PAREN_OPEN CONDICION_BAJA PAREN_CLOSE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICION_MEDIA","",parser.guia);        
        getGuia();

        Nodo nd1 = new Nodo("PAREN_OPEN",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("PAREN_CLOSE",n2.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd2);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_MEDIA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICION_ALTA ::= CONDICION_MEDIA OPER_REL CONDICION_MEDIA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICION_ALTA","",parser.guia);        
        getGuia();
        Nodo nd1 = new Nodo("OPER_REL",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<CONDICION_ALTA>CONDICION_MEDIA OPER_REL CONDICION_MEDIA");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_ALTA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA_CONDICIONES ::= LISTA_CONDICIONES CONDICION_ALTA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<lista><condicion alta>CONDICION_ALTA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_CONDICIONES ::= CONDICION_BAJA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion baja> CONDICION_BAJA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_CONDICIONES ::= CONDICION_MEDIA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion media>CONDICION_MEDIA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTA_CONDICIONES ::= CONDICION_ALTA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion alta>CONDICION_ALTA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICIONALES ::= IF_STATEMENT PAREN_OPEN LISTA_CONDICIONES PAREN_CLOSE CURLY_BRACE_OPEN CODIGO CURLY_BRACE_CLOSE ELSE_STATEMENT CURLY_BRACE_OPEN CODIGO CURLY_BRACE_CLOSE 
            {
              Object RESULT =null;
		int if1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int if1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object if1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int par1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int par1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object par1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int lcond1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int lcond1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object lcond1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int par2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int par2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object par2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int cb1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int cb1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object cb1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ifcod1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ifcod1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object ifcod1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cb2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cb2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object cb2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object else1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cb3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cb3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object cb3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int elsecode1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int elsecode1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object elsecode1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cb4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cb4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cb4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICIONALES","",parser.guia);        
        getGuia(); 

        Nodo nif1 = new Nodo("IF_STATEMENT",if1.toString(),parser.guia);
        getGuia();

        Nodo npar1 = new Nodo("PAREN_OPEN",par1.toString(),parser.guia);
        getGuia();

        Nodo npar2 = new Nodo("PAREN_CLOSE",par2.toString(),parser.guia);
        getGuia();

        Nodo ncb1 = new Nodo("BEGIN_IF",cb1.toString(),parser.guia);
        getGuia();

        Nodo ncb2 = new Nodo("CURLY_BRACE_CLOSE",cb2.toString(),parser.guia);
        getGuia();

        Nodo nelse1 = new Nodo("ELSE_STATEMENT",else1.toString(),parser.guia);
        getGuia();

        Nodo ncb3 = new Nodo("BEGIN_ELSE",cb3.toString(),parser.guia);
        getGuia();

        Nodo ncb4 = new Nodo("END_ELSE",cb4.toString(),parser.guia);
        getGuia();

        

        raiz.addRaiz(nif1);
        raiz.addRaiz(npar1);
        raiz.addRaiz((Nodo)lcond1);
        raiz.addRaiz(npar2);
        raiz.addRaiz(ncb1);
        raiz.addRaiz((Nodo)ifcod1);
        raiz.addRaiz(ncb2);
        raiz.addRaiz(nelse1);
        raiz.addRaiz(ncb3);
        raiz.addRaiz((Nodo)elsecode1);
        raiz.addRaiz(ncb4);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADOR_ARITMETICO ::= OPER_ART_DIV 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_DIV",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;        
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_DIV>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADOR_ARITMETICO ::= OPER_ART_MUL 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_MUL",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;     
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_MUL>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADOR_ARITMETICO ::= OPER_ART_RESTA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_RESTA",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;        
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_RESTA>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPERADOR_ARITMETICO ::= OPER_ART_SUMA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_SUMA",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz; 
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_SUMA>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_VALOR ::= VALOR_LOG 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_LOG",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;         
        System.out.println("<TIPO_VALOR><VALOR_LOG>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_VALOR ::= TEXT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("TEXT",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_VALOR ::= TIPO_VALOR_COMPATIBLE 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><TIPO_VALOR_COMPATIBLE>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_VALOR_COMPATIBLE ::= IDENTIFIER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("IDENTIFIER",n1.toString(),parser.guia,sym);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_VALOR_COMPATIBLE ::= VALOR_GRUPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_GRUPO",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;       
        System.out.println("<TIPO_VALOR><VALOR_GRUPO>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_VALOR_COMPATIBLE ::= NUMBER_FLOAT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("NUMBER_FLOAT",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz; 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_VALOR_COMPATIBLE ::= NUMBER_INTEGER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_ENT",n1.toString(),parser.guia);
        getGuia();  
        

        raiz.addRaiz(nd1);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTA_VALORES ::= TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES","",parser.guia);        
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;          
        System.out.println("<LISTA_VALORES><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTA_VALORES ::= LISTA_VALORES OPER_AGRUP_COMA TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;   
        System.out.println("<LISTA_VALORES><OPER_AGRUP_COMA><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION_GRUPO ::= LISTA_VARIABLES OPER_AGRUP_CI NUMBER_INTEGER OPER_AGRUP_CF OPER_ASIG_IGUAL TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_CI",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("NUMBER_INTEGER",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("OPER_AGRUP_CF",n3.toString(),parser.guia);
        getGuia(); 
        Nodo nd4 = new Nodo("OPER_ASIG_IGUALF",n4.toString(),parser.guia);
        getGuia(); 
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz(nd3);
        raiz.addRaiz(nd4);
        raiz.addRaiz((Nodo)raiz2);
        
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GRUPO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION_GRUPO ::= LISTA_VARIABLES OPER_ASIG_IGUAL CURLY_BRACE_OPEN LISTA_VALORES OPERADOR_ARITMETICO LISTA_VALORES CURLY_BRACE_CLOSE 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("CURLY_BRACE_OPEN",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("CURLY_BRACE_CLOSE",n3.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz((Nodo)raiz3);
        raiz.addRaiz((Nodo)raiz4);
        raiz.addRaiz(nd3);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GRUPO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION_GRUPO ::= LISTA_VARIABLES OPER_ASIG_IGUAL CURLY_BRACE_OPEN LISTA_VALORES CURLY_BRACE_CLOSE 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("CURLY_BRACE_OPEN",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("CURLY_BRACE_CLOSE",n3.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd3);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GRUPO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_VARIABLES ::= IDENTIFIER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VARIABLES","",parser.guia);        
        getGuia();       
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        
        Nodo nd1 = new Nodo("IDENTIFIER",n1.toString(),parser.guia,sym);
        getGuia();   
          
             
        raiz.addRaiz(nd1);
       
        
        RESULT = raiz;
        
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA_VARIABLES ::= LISTA_VARIABLES OPER_AGRUP_COMA IDENTIFIER 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VARIABLES","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd2 = new Nodo("IDENTIFIER",n2.toString(),parser.guia,sym);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);       
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);       
        
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA_VALORES_EXP ::= OPERADOR_ARITMETICO TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES_EXP","",parser.guia);        
        getGuia(); 
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;    
        System.out.println("<OPERADOR_ARITMETICO><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_EXP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_VALORES_EXP ::= LISTA_VALORES_EXP OPERADOR_ARITMETICO TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES_EXP","",parser.guia);        
        getGuia(); 
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz((Nodo)raiz3);
        RESULT = raiz;         
        System.out.println("<LISTA_VALORES_EXP><LISTA_VALORES_EXP><OPERADOR_ARITMETICO><TIPO_VALOR>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_EXP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP_BASICA ::= PAREN_OPEN TIPO_VALOR LISTA_VALORES_EXP PAREN_CLOSE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_BASICA","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("PAREN_OPEN",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("PAREN_CLOSE",n2.toString(),parser.guia);
        getGuia(); 
        
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd2);
        RESULT = raiz;         
        System.out.println("<EXP_BASICA>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_BASICA",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP_ASIGNACION ::= EXP_BASICA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1); 
        RESULT = raiz;         
        System.out.println("<EXP_ASIGNACION><EXP_BASICA>");     
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP_ASIGNACION ::= PAREN_OPEN EXP_ASIGNACION OPERADOR_ARITMETICO EXP_BASICA PAREN_CLOSE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("PAREN_OPEN",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("PAREN_CLOSE",n2.toString(),parser.guia);
        getGuia(); 
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz(nd2);
        RESULT = raiz;         
       System.out.println("<EXP_ASIGNACION>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP_ASIGNACION ::= EXP_ASIGNACION OPERADOR_ARITMETICO EXP_BASICA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  

        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    

        RESULT = raiz;         
       System.out.println("<EXP_ASIGNACION>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP_ASIG_BASICA ::= EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1); 
        RESULT = raiz; 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP_ASIG_BASICA ::= TIPO_VALOR LISTA_VALORES_EXP 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        RESULT = raiz;         
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP_ASIG_BASICA ::= TIPO_VALOR LISTA_VALORES_EXP OPERADOR_ARITMETICO EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz((Nodo)raiz4);      
        RESULT = raiz;         
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP_ASIG_BASICA ::= PAREN_OPEN TIPO_VALOR LISTA_VALORES_EXP OPERADOR_ARITMETICO EXP_ASIGNACION PAREN_CLOSE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("PAREN_OPEN",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("PAREN_CLOSE",n2.toString(),parser.guia);
        getGuia(); 
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz((Nodo)raiz4);      
        raiz.addRaiz(nd2);
        RESULT = raiz;         
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXP_ASIG_BASICA ::= EXP_ASIG_BASICA EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        RESULT = raiz; 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= LISTA_VARIABLES OPER_ASIG_IGUAL EXP_ASIG_BASICA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();        
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<ASIGNACION><LISTA_VARIABLES><OPER_ASIG_IGUAL><TIPO_VALOR><OPERADOR_ARITMETICO><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= LISTA_VARIABLES OPER_ASIG_IGUAL TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();  

        raiz.addRaiz((Nodo)raiz1);       
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        
        RESULT = raiz;
        System.out.println("<ASIGNACION><LISTA_VARIABLES><OPER_ASIG_IGUAL><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= VARIABLE ASIGNACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("VARIABLE",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;      
        System.out.println("<DECLARACION><VARIABLE><ASIGNACION>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= VARIABLE LISTA_VARIABLES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("VARIABLE",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;  
        
        
        System.out.println("<DECLARACION><VARIABLE> <LISTA_VARIABLES>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INDEX ::= EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;
        System.out.println("<INDEX><EXP_ASIGNACION>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INDEX",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INDEX ::= IDENTIFIER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("NIDENTIFIER",n1.toString(),parser.guia,sym);
        getGuia();

        raiz.addRaiz(nd1);       
        RESULT = raiz; 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INDEX",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INDEX ::= NUMBER_INTEGER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("NUMBER_INTEGER",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INDEX",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VALOR_GRUPO ::= IDENTIFIER OPER_AGRUP_CI INDEX OPER_AGRUP_CF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia(); 
        
        Nodo nd1 = new Nodo("IDENTIFIER",n1.toString(),parser.guia);
        getGuia();
        
        Nodo nd2 = new Nodo("OPER_AGRUP_CI",n2.toString(),parser.guia);
        getGuia();
                
        Nodo nd3 = new Nodo("OPER_AGRUP_CF",n3.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd3);
        
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_GRUPO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_GRUPO ::= PAL_GRUPO ASIGNACION_GRUPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia(); 
        
        Nodo nd1 = new Nodo("PAL_GRUPO",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);        
        RESULT = raiz;    
        System.out.println("<DECLARACION_GRUPO><PAL_GRUPO> <ASIGNACION_GRUPO>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GRUPO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_GRUPO ::= PAL_GRUPO LISTA_VARIABLES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia();        
        
        Nodo nd1 = new Nodo("PAL_GRUPO",n1.toString(),parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        RESULT = raiz;         
        System.out.println("<DECLARACION_GRUPO><PAL_GRUPO> <LISTA_VARIABLES>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GRUPO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_IMPRECIONES ::= TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
       Nodo raiz = new Nodo("LISTA_IMPRECIONES","",parser.guia);        
       getGuia(); 
       raiz.addRaiz((Nodo)raiz1);
       RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IMPRECIONES",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA_IMPRECIONES ::= LISTA_IMPRECIONES OPER_AGRUP_COMA TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_IMPRECIONES","",parser.guia);        
        getGuia();        
        
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);        
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IMPRECIONES",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IMPRIMIR_DATO ::= IMPRIMIR PAREN_OPEN LISTA_IMPRECIONES PAREN_CLOSE 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("IMPRIMIR_DATO","",parser.guia);        
        getGuia();       
        
        Nodo nd1 = new Nodo("IMPRIMIR",n1.toString(),parser.guia);
        getGuia();  
        
        Nodo nd2 = new Nodo("PAREN_OPEN",n2.toString(),parser.guia);
        getGuia(); 
        
        Nodo nd3 = new Nodo("PAREN_CLOSE",n3.toString(),parser.guia);
        getGuia(); 

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz(nd3);

        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_DATO",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LEER_DATO ::= LEER IDENTIFIER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LEER_DATO","",parser.guia);
        getGuia();
        
        Nodo nd1 = new Nodo("LEER",n1.toString(),parser.guia);
        getGuia();

        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd2 = new Nodo("IDENTIFIER",n2.toString(),parser.guia,sym);
        getGuia();
        
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);

        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LEER_DATO",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INC_DEC ::= OPER_ASIG_InDe IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ASIGNACION_INC_DEC","",parser.guia);
            getGuia();
            
            Nodo nd1 = new Nodo("INC/DEC",n1.toString(),parser.guia);
            getGuia();

            Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
            Nodo nd2 = new Nodo("IDENTIFIER",n2.toString(),parser.guia,sym);            
            getGuia();

            Nodo nd3 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();
            
            raiz.addRaiz(nd1);
            raiz.addRaiz(nd2);
            raiz.addRaiz(nd3);
            

            RESULT = raiz;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INC_DEC",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURAS ::= C_REPETIR SEMICOLON 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURAS ::= C_MIENTRAS SEMICOLON 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURAS ::= CONDICIONALES SEMICOLON 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURAS ::= INC_DEC 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            RESULT = raiz;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURAS ::= ASIGNACION_GRUPO SEMICOLON 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURAS ::= DECLARACION_GRUPO SEMICOLON 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURAS ::= ASIGNACION SEMICOLON 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURAS ::= DECLARACION SEMICOLON 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURAS ::= IMPRIMIR_DATO SEMICOLON 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();
            
            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);
            
            RESULT = raiz;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= ESTRUCTURAS 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
       Nodo raiz = new Nodo("CODIGO","",parser.guia);
       getGuia(); 

       raiz.addRaiz((Nodo) raiz1);
       RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= CODIGO ESTRUCTURAS 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CODIGO","",parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo) raiz1);
        raiz.addRaiz((Nodo) raiz2);
        
        RESULT = raiz;
        
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= CODIGO 
            {
              Object RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object prog = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo n1 = new Nodo("INIT","",parser.guia);
        getGuia();
        n1.addRaiz((Nodo) prog);
        parser.nodoPrincipal = (Nodo) n1;
        RESULT = n1;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


     
}
