
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 27 23:20:38 MST 2022
//----------------------------------------------------

package Sintactico;

import java_cup.runtime.*;
import Lexico.Pintar;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 27 23:20:38 MST 2022
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\011\005\000\002\033" +
    "\004\000\002\034\006\000\002\035\005\000\002\035\003" +
    "\000\002\013\004\000\002\013\004\000\002\016\006\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\005\004\000\002\005\004\000\002\007\005\000\002\007" +
    "\005\000\002\040\004\000\002\040\010\000\002\040\006" +
    "\000\002\040\004\000\002\040\003\000\002\010\005\000" +
    "\002\010\007\000\002\010\003\000\002\012\006\000\002" +
    "\037\005\000\002\037\004\000\002\006\005\000\002\006" +
    "\003\000\002\014\007\000\002\014\011\000\002\014\010" +
    "\000\002\015\005\000\002\015\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\020\015\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\004\000\002\022\005\000\002" +
    "\023\005\000\002\024\005\000\002\025\011\000\002\026" +
    "\014\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\042\005\000\002\044\004\000\002\043\004\000" +
    "\002\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\024\004\016\005\010\006\011\007\015\010" +
    "\021\013\004\016\027\030\006\044\025\001\002\000\004" +
    "\031\237\001\002\000\004\002\236\001\002\000\004\044" +
    "\234\001\002\000\010\027\233\035\214\037\161\001\002" +
    "\000\004\044\025\001\002\000\004\044\211\001\002\000" +
    "\004\045\210\001\002\000\004\045\207\001\002\000\026" +
    "\002\000\004\016\005\010\006\011\007\015\010\021\013" +
    "\004\016\027\030\006\044\025\001\002\000\004\031\201" +
    "\001\002\000\004\044\025\001\002\000\004\045\156\001" +
    "\002\000\004\045\155\001\002\000\006\004\131\044\134" +
    "\001\002\000\004\045\130\001\002\000\004\045\127\001" +
    "\002\000\034\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\012\ufffe\013\ufffe\015\ufffe\016\ufffe\030\ufffe\034" +
    "\ufffe\044\ufffe\001\002\000\012\027\uffd8\035\uffd8\037\uffd8" +
    "\045\uffd8\001\002\000\004\045\126\001\002\000\004\031" +
    "\035\001\002\000\004\045\034\001\002\000\034\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013" +
    "\ufff7\015\ufff7\016\ufff7\030\ufff7\034\ufff7\044\ufff7\001\002" +
    "\000\004\045\033\001\002\000\034\002\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd\013\ufffd\015\ufffd" +
    "\016\ufffd\030\ufffd\034\ufffd\044\ufffd\001\002\000\034\002" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4" +
    "\013\ufff4\015\ufff4\016\ufff4\030\ufff4\034\ufff4\044\ufff4\001" +
    "\002\000\016\031\052\040\040\041\041\042\047\043\051" +
    "\044\036\001\002\000\030\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\031\uffcf\032\uffcf\034\uffcf\035\074\037\uffcf" +
    "\045\uffcf\001\002\000\026\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\031\uffd0\032\uffd0\034\uffd0\037\uffd0\045\uffd0" +
    "\001\002\000\026\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\031\uffd2\032\uffd2\034\uffd2\037\uffd2\045\uffd2\001\002" +
    "\000\026\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\031" +
    "\uffd1\032\uffd1\034\uffd1\037\uffd1\045\uffd1\001\002\000\006" +
    "\031\052\032\062\001\002\000\010\031\uffc4\032\uffc4\037" +
    "\uffc4\001\002\000\010\031\uffc6\032\uffc6\037\uffc6\001\002" +
    "\000\012\022\057\031\uffc5\032\uffc5\037\uffc5\001\002\000" +
    "\004\022\055\001\002\000\026\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\031\uffcd\032\uffcd\034\uffcd\037\uffcd\045" +
    "\uffcd\001\002\000\026\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\031\uffce\032\uffce\034\uffce\037\uffce\045\uffce\001" +
    "\002\000\026\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\031\uffcc\032\uffcc\034\uffcc\037\uffcc\045\uffcc\001\002\000" +
    "\014\040\040\041\041\042\047\043\051\044\036\001\002" +
    "\000\004\032\054\001\002\000\012\022\uffc1\031\uffc1\032" +
    "\uffc1\037\uffc1\001\002\000\014\040\040\041\041\042\047" +
    "\043\051\044\036\001\002\000\010\031\uffc0\032\uffc0\037" +
    "\uffc0\001\002\000\004\031\052\001\002\000\010\031\uffc2" +
    "\032\uffc2\037\uffc2\001\002\000\010\031\uffc3\032\uffc3\037" +
    "\uffc3\001\002\000\004\033\064\001\002\000\004\022\057" +
    "\001\002\000\024\004\016\005\010\006\011\007\015\010" +
    "\021\013\004\016\027\030\006\044\025\001\002\000\026" +
    "\004\016\005\010\006\011\007\015\010\021\013\004\016" +
    "\027\030\006\034\067\044\025\001\002\000\034\002\uffff" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\012\uffff\013" +
    "\uffff\015\uffff\016\uffff\030\uffff\034\uffff\044\uffff\001\002" +
    "\000\004\020\070\001\002\000\004\033\071\001\002\000" +
    "\024\004\016\005\010\006\011\007\015\010\021\013\004" +
    "\016\027\030\006\044\025\001\002\000\026\004\016\005" +
    "\010\006\011\007\015\010\021\013\004\016\027\030\006" +
    "\034\073\044\025\001\002\000\004\045\uffc7\001\002\000" +
    "\010\031\102\040\075\044\077\001\002\000\004\036\uffeb" +
    "\001\002\000\004\036\125\001\002\000\004\036\uffea\001" +
    "\002\000\014\023\111\024\110\025\106\026\107\036\uffe9" +
    "\001\002\000\022\023\uffdd\024\uffdd\025\uffdd\026\uffdd\031" +
    "\uffdd\032\uffdd\036\uffdd\045\uffdd\001\002\000\016\031\102" +
    "\040\040\041\041\042\047\043\051\044\036\001\002\000" +
    "\012\023\111\024\110\025\106\026\107\001\002\000\012" +
    "\023\111\024\110\025\106\026\107\001\002\000\014\040" +
    "\040\041\041\042\047\043\051\044\036\001\002\000\016" +
    "\031\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\001" +
    "\002\000\016\031\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\001\002\000\016\031\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\001\002\000\016\031\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\001\002\000\014\023" +
    "\111\024\110\025\106\026\107\032\114\001\002\000\014" +
    "\040\040\041\041\042\047\043\051\044\036\001\002\000" +
    "\022\023\uffdc\024\uffdc\025\uffdc\026\uffdc\031\uffdc\032\uffdc" +
    "\036\uffdc\045\uffdc\001\002\000\020\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\031\uffdb\032\uffdb\045\uffdb\001\002\000\020" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\031\uffda\032\uffda\045" +
    "\uffda\001\002\000\004\031\121\001\002\000\014\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\032\122\001\002\000\014\040" +
    "\040\041\041\042\047\043\051\044\036\001\002\000\022" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\031\uffde\032\uffde\036" +
    "\uffde\045\uffde\001\002\000\004\031\121\001\002\000\022" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\031\uffdf\032\uffdf\036" +
    "\uffdf\045\uffdf\001\002\000\026\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\031\uffec\032\uffec\034\uffec\037\uffec\045" +
    "\uffec\001\002\000\034\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\030" +
    "\ufff8\034\ufff8\044\ufff8\001\002\000\034\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\015" +
    "\ufff6\016\ufff6\030\ufff6\034\ufff6\044\ufff6\001\002\000\034" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012" +
    "\ufffc\013\ufffc\015\ufffc\016\ufffc\030\ufffc\034\ufffc\044\ufffc" +
    "\001\002\000\004\044\153\001\002\000\004\037\uffbc\001" +
    "\002\000\004\037\141\001\002\000\006\027\136\037\uffbb" +
    "\001\002\000\004\037\uffbd\001\002\000\004\040\140\001" +
    "\002\000\004\037\uffb8\001\002\000\004\037\uffb9\001\002" +
    "\000\004\011\142\001\002\000\016\031\052\040\040\041" +
    "\041\042\047\043\051\044\036\001\002\000\006\031\052" +
    "\037\144\001\002\000\004\030\145\001\002\000\004\040" +
    "\152\001\002\000\004\014\147\001\002\000\024\004\016" +
    "\005\010\006\011\007\015\010\021\013\004\016\027\030" +
    "\006\044\025\001\002\000\026\004\016\005\010\006\011" +
    "\007\015\010\021\012\151\013\004\016\027\030\006\044" +
    "\025\001\002\000\004\045\uffbe\001\002\000\004\014\uffb7" +
    "\001\002\000\004\027\136\001\002\000\004\037\uffba\001" +
    "\002\000\034\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa\030\ufffa\034" +
    "\ufffa\044\ufffa\001\002\000\034\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\015\ufff5\016" +
    "\ufff5\030\ufff5\034\ufff5\044\ufff5\001\002\000\004\045\uffe7" +
    "\001\002\000\010\027\162\037\161\045\uffe8\001\002\000" +
    "\004\044\200\001\002\000\016\031\166\040\040\041\041" +
    "\042\047\043\051\044\036\001\002\000\016\023\111\024" +
    "\110\025\106\026\107\031\uffe0\045\uffe0\001\002\000\006" +
    "\031\102\045\uffe5\001\002\000\014\023\111\024\110\025" +
    "\106\026\107\045\uffe6\001\002\000\016\031\102\040\040" +
    "\041\041\042\047\043\051\044\036\001\002\000\012\023" +
    "\111\024\110\025\106\026\107\001\002\000\014\023\111" +
    "\024\110\025\106\026\107\032\114\001\002\000\016\031" +
    "\102\040\040\041\041\042\047\043\051\044\036\001\002" +
    "\000\014\023\111\024\110\025\106\026\107\032\173\001" +
    "\002\000\006\031\uffe3\045\uffe3\001\002\000\016\023\111" +
    "\024\110\025\106\026\107\031\uffe1\045\uffe1\001\002\000" +
    "\016\031\102\040\040\041\041\042\047\043\051\044\036" +
    "\001\002\000\016\023\111\024\110\025\106\026\107\031" +
    "\uffe2\045\uffe2\001\002\000\016\023\111\024\110\025\106" +
    "\026\107\031\uffe4\045\uffe4\001\002\000\012\027\uffd9\035" +
    "\uffd9\037\uffd9\045\uffd9\001\002\000\014\040\040\041\041" +
    "\042\047\043\051\044\036\001\002\000\006\032\204\037" +
    "\205\001\002\000\006\032\uffef\037\uffef\001\002\000\004" +
    "\045\ufff1\001\002\000\014\040\040\041\041\042\047\043" +
    "\051\044\036\001\002\000\006\032\ufff0\037\ufff0\001\002" +
    "\000\034\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\030\ufff9\034\ufff9" +
    "\044\ufff9\001\002\000\034\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\030\ufffb\034\ufffb\044\ufffb\001\002\000\004\045\ufff2\001" +
    "\002\000\004\045\uffed\001\002\000\012\027\215\035\214" +
    "\037\161\045\uffee\001\002\000\004\040\227\001\002\000" +
    "\004\033\216\001\002\000\014\040\040\041\041\042\047" +
    "\043\051\044\036\001\002\000\016\023\111\024\110\025" +
    "\106\026\107\034\223\037\222\001\002\000\016\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\034\uffd3\037\uffd3\001\002\000" +
    "\014\040\040\041\041\042\047\043\051\044\036\001\002" +
    "\000\014\040\040\041\041\042\047\043\051\044\036\001" +
    "\002\000\004\045\uffd7\001\002\000\016\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\034\uffd4\037\uffd4\001\002\000\006\034" +
    "\226\037\222\001\002\000\004\045\uffd6\001\002\000\004" +
    "\036\230\001\002\000\004\027\231\001\002\000\014\040" +
    "\040\041\041\042\047\043\051\044\036\001\002\000\004" +
    "\045\uffd5\001\002\000\020\031\166\033\216\040\040\041" +
    "\041\042\047\043\051\044\036\001\002\000\004\045\235" +
    "\001\002\000\034\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\030\ufff3" +
    "\034\ufff3\044\ufff3\001\002\000\004\002\001\001\002\000" +
    "\016\031\052\040\040\041\041\042\047\043\051\044\036" +
    "\001\002\000\006\031\052\032\241\001\002\000\004\014" +
    "\242\001\002\000\024\004\016\005\010\006\011\007\015" +
    "\010\021\013\004\016\027\030\006\044\025\001\002\000" +
    "\026\004\016\005\010\006\011\007\015\010\021\013\004" +
    "\015\244\016\027\030\006\044\025\001\002\000\004\045" +
    "\uffbf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\036\002\004\003\013\004\023\005\011\006" +
    "\006\007\017\011\030\013\012\014\025\020\022\025\016" +
    "\026\027\033\021\034\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\212\014\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\065\005\011\006\006" +
    "\007\017\011\030\013\012\014\025\020\022\025\016\026" +
    "\027\033\021\034\031\001\001\000\002\001\001\000\006" +
    "\006\157\007\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\132\042\134\043\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\036\021\041\022\043\023\044" +
    "\024\042\027\045\036\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\060\023\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\036\024" +
    "\052\027\045\036\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\036\027\055\036\047\001\001\000" +
    "\002\001\001\000\004\023\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\064\004\023\005\011\006\006\007\017\011\030" +
    "\013\012\014\025\020\022\025\016\026\027\033\021\034" +
    "\031\001\001\000\032\004\065\005\011\006\006\007\017" +
    "\011\030\013\012\014\025\020\022\025\016\026\027\033" +
    "\021\034\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\071\004\023\005\011\006" +
    "\006\007\017\011\030\013\012\014\025\020\022\025\016" +
    "\026\027\033\021\034\031\001\001\000\032\004\065\005" +
    "\011\006\006\007\017\011\030\013\012\014\025\020\022" +
    "\025\016\026\027\033\021\034\031\001\001\000\002\001" +
    "\001\000\010\010\077\012\100\017\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\122\001\001\000\002\001\001\000\014\010\102\012\100" +
    "\016\036\027\103\036\047\001\001\000\004\030\116\001" +
    "\001\000\006\030\104\037\111\001\001\000\010\016\036" +
    "\027\115\036\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\112" +
    "\001\001\000\010\016\036\027\114\036\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\117\001\001\000\002\001\001\000\010\016\036\027" +
    "\103\036\047\001\001\000\002\001\001\000\004\012\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\036\021" +
    "\142\022\043\023\044\024\042\027\045\036\047\001\001" +
    "\000\006\022\060\023\062\001\001\000\004\032\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\147" +
    "\004\023\005\011\006\006\007\017\011\030\013\012\014" +
    "\025\020\022\025\016\026\027\033\021\034\031\001\001" +
    "\000\032\004\065\005\011\006\006\007\017\011\030\013" +
    "\012\014\025\020\022\025\016\026\027\033\021\034\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\162\012\100\016\036\027\164\036\047" +
    "\040\163\001\001\000\004\030\122\001\001\000\006\010" +
    "\176\012\100\001\001\000\006\030\104\037\173\001\001" +
    "\000\014\010\102\012\100\016\036\027\166\036\047\001" +
    "\001\000\006\030\104\037\167\001\001\000\004\030\170" +
    "\001\001\000\014\010\171\012\100\016\036\027\114\036" +
    "\047\001\001\000\004\030\122\001\001\000\002\001\001" +
    "\000\004\030\174\001\001\000\014\010\175\012\100\016" +
    "\036\027\114\036\047\001\001\000\004\030\122\001\001" +
    "\000\004\030\122\001\001\000\002\001\001\000\012\016" +
    "\036\027\202\035\201\036\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\036\027" +
    "\205\036\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\216\016\036\027\217\036\047\001\001\000\004\030" +
    "\220\001\001\000\002\001\001\000\012\015\224\016\036" +
    "\027\217\036\047\001\001\000\010\016\036\027\223\036" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\036\027\231\036\047\001\001\000\002" +
    "\001\001\000\016\010\162\012\100\016\036\027\164\036" +
    "\047\040\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\036\021\237\022\043\023" +
    "\044\024\042\027\045\036\047\001\001\000\006\022\060" +
    "\023\062\001\001\000\002\001\001\000\034\003\242\004" +
    "\023\005\011\006\006\007\017\011\030\013\012\014\025" +
    "\020\022\025\016\026\027\033\021\034\031\001\001\000" +
    "\032\004\065\005\011\006\006\007\017\011\030\013\012" +
    "\014\025\020\022\025\016\026\027\033\021\034\031\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol simboloAnterior;
    public Nodo nodoPrincipal;
    public Pintar estilo = new Pintar();
    private int guia = 0;
    private int conError = 0;
    public String textError = "";
    private int charError = 0;
    
    private int charCode = 0;
    public int charErrorDetec(){
        return charCode;
    }
    private void getGuia(){
        System.out.println("guia :"+guia);
        guia++;
    }

    

     public void syntax_error(Symbol cur_token) {
        //report_error("Syntax error", cur_token); 
        
        if(cur_token.sym != 0){
            Scanner s = getScanner();
        
        
        report_error("Syntax error", cur_token); 
        this.charCode = cur_token.left;
        
        conError++;

        String m = "Error "+conError+": \n";
        int l = cur_token.right;
        String v = cur_token.value.toString();

        textError += m+"\tLinea: "+l+"\n\tCerca de: "+v+"\n";

        int tam =textError.length();
        estilo.insertarCodigo(textError);        
        estilo.pintaRojoFuerte(charError,tam);

        charError += tam;
        }

    }

     
/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // R_INCDEC ::= OPER_ASIG_InDe VALOR_ENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("R_INCDEC","",parser.guia);
        getGuia();
        Nodo nd1 = new Nodo("OPER_ASIG_InDe",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("VALOR_ENT",n2.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        RESULT = raiz;
        System.out.println("<R_INCDEC><OPER_ASIG_InDe VALOR_ENT>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("R_INCDEC",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION_CICLO ::= NOMBRE_VAR ASIG_CICLO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_CICLO","",parser.guia);
        getGuia();
        
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia,sym);            
        getGuia();
     
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<ASIGNACION_CICLO>NOMBRE_VAR ASIG_CICLO");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_CICLO",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIG_CICLO ::= OPER_ASIG_IGUAL VALOR_ENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIG_CICLO","",parser.guia);
        getGuia();
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("VALOR_ENT",n2.toString(),parser.guia);
        getGuia();
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        RESULT = raiz;
        System.out.println("<ASIG_CICLO>OPER_ASIG_IGUAL VALOR_ENT");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIG_CICLO",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECL_ASIG_CICLO ::= PAL_VARIABLE NOMBRE_VAR ASIG_CICLO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECL_ASIG_CICLO","",parser.guia);
        getGuia();
        Nodo nd1 = new Nodo("PAL_VARIABLE",n1.toString(),parser.guia);
        getGuia();
        
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd2 = new Nodo("NOMBRE_VAR",n2.toString(),parser.guia,sym);            
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);
        
        RESULT = raiz;
        System.out.println("<DECL_ASIG_CICLO>PAL_VARIABLE NOMBRE_VAR OPER_ASIG_IGUAL VALOR_ENT");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECL_ASIG_CICLO",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VARIABLE_DA ::= NOMBRE_VAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("VARIABLE_DA","",parser.guia);
        getGuia();
        
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia,sym);            
        getGuia();

        raiz.addRaiz(nd1);
        RESULT = raiz;
        System.out.println("<VARIABLE_DA><NOMBRE_VAR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VARIABLE_DA ::= ASIGNACION_CICLO 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("VARIABLE_DA","",parser.guia);
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VARIABLE_DA ::= DECL_ASIG_CICLO 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("VARIABLE_DA","",parser.guia);
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLE_DA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // C_REPETIR ::= CICLO_REPETIR VARIABLE_DA OPER_AGRUP_COMA REPETIR_HASTA LISTA_CONDICIONES OPER_AGRUP_COMA R_INCDEC INICIO_CICLO CODIGO REPETIR_FIN 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("C_REPETIR","",parser.guia);        
        getGuia();
        Nodo nd1 = new Nodo("CICLO_REPETIR",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("OPER_AGRUP_COMA",n2.toString(),parser.guia);
        getGuia();
        Nodo nd3 = new Nodo("REPETIR_HASTA",n3.toString(),parser.guia);
        getGuia();
        Nodo nd4 = new Nodo("OPER_AGRUP_COMA",n4.toString(),parser.guia);
        getGuia();
        Nodo nd5 = new Nodo("INICIO_CICLO",n5.toString(),parser.guia);
        getGuia();
        Nodo nd6 = new Nodo("REPETIR_FIN",n6.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd2);
        raiz.addRaiz(nd3);
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd4);
        raiz.addRaiz((Nodo)raiz3);
        raiz.addRaiz(nd5);
        raiz.addRaiz((Nodo)raiz4);
        raiz.addRaiz(nd6);
        RESULT = raiz;
        System.out.println("<C_REPETIR>CICLO_REPETIR VARIABLE_DA OPER_AGRUP_COMA REPETIR_HASTA LISTA_CONDICIONES OPER_AGRUP_COMA R_INCDEC INICIO_CICLO CODIGO REPETIR_FIN");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_REPETIR",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // C_MIENTRAS ::= CICLO_MIENTRAS OPER_AGRUP_PI LISTA_CONDICIONES OPER_AGRUP_PF INICIO_CICLO CODIGO FIN_MIENTRAS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("C_MIENTRAS","",parser.guia);        
        getGuia();
        Nodo nd1 = new Nodo("CICLO_MIENTRAS",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("OPER_AGRUP_PI",n2.toString(),parser.guia);
        getGuia();
        Nodo nd3 = new Nodo("OPER_AGRUP_PF",n3.toString(),parser.guia);
        getGuia();
        Nodo nd4 = new Nodo("INICIO_CICLO",n4.toString(),parser.guia);
        getGuia();
        Nodo nd5 = new Nodo("FIN_MIENTRAS",n5.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd3);
        raiz.addRaiz(nd4);
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd5);
        RESULT = raiz;
        System.out.println("<C_MIENTRAS>CICLO_MIENTRAS OPER_AGRUP_PI LISTA_CONDICIONES OPER_AGRUP_PF INICIO_CICLO CODIGO FIN_MIENTRAS");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_MIENTRAS",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICION_BAJA ::= TIPO_VALOR OPER_REL TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICION_BAJA","",parser.guia);        
        getGuia();

        Nodo nd1 = new Nodo("OPER_REL",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<CONDICION_BAJA>TIPO_VALOR OPER_REL TIPO_VALOR");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_BAJA",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION_MEDIA ::= OPER_AGRUP_PI CONDICION_BAJA OPER_AGRUP_PF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICION_MEDIA","",parser.guia);        
        getGuia();

        Nodo nd1 = new Nodo("OPER_AGRUP_PI",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("OPER_AGRUP_PF",n2.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd2);
        RESULT = raiz;
        System.out.println("<CONDICION_MEDIA>OPER_AGRUP_PI CONDICION_BAJA OPER_AGRUP_PF");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_MEDIA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION_ALTA ::= CONDICION_MEDIA OPER_REL CONDICION_MEDIA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICION_ALTA","",parser.guia);        
        getGuia();
        Nodo nd1 = new Nodo("OPER_REL",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<CONDICION_ALTA>CONDICION_MEDIA OPER_REL CONDICION_MEDIA");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICION_ALTA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA_CONDICIONES ::= LISTA_CONDICIONES CONDICION_ALTA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<lista><condicion alta>CONDICION_ALTA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA_CONDICIONES ::= CONDICION_BAJA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion baja> CONDICION_BAJA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_CONDICIONES ::= CONDICION_MEDIA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion media>CONDICION_MEDIA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_CONDICIONES ::= CONDICION_ALTA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion alta>CONDICION_ALTA ");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_CONDICIONES",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICIONALES ::= CONDICION_SI OPER_AGRUP_PI LISTA_CONDICIONES OPER_AGRUP_PF OPER_AGRUP_LLI CODIGO OPER_AGRUP_LLF CONDICION_SINO OPER_AGRUP_LLI CODIGO OPER_AGRUP_LLF 
            {
              Object RESULT =null;
		int if1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).left;
		int if1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).right;
		Object if1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)).value;
		int par1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int par1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object par1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int lcond1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int lcond1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object lcond1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int par2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).left;
		int par2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).right;
		Object par2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)).value;
		int cb1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int cb1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object cb1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int ifcod1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int ifcod1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object ifcod1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int cb2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int cb2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object cb2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object else1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int cb3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int cb3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object cb3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int elsecode1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int elsecode1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object elsecode1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int cb4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cb4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cb4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CONDICIONALES","",parser.guia);        
        getGuia(); 

        Nodo nif1 = new Nodo("CONDICION_SI",if1.toString(),parser.guia);
        getGuia();

        Nodo npar1 = new Nodo("OPER_AGRUP_PI",par1.toString(),parser.guia);
        getGuia();

        Nodo npar2 = new Nodo("OPER_AGRUP_PF",par2.toString(),parser.guia);
        getGuia();

        Nodo ncb1 = new Nodo("OPER_AGRUP_LLI",cb1.toString(),parser.guia);
        getGuia();

        Nodo ncb4 = new Nodo("OPER_AGRUP_LLF",cb4.toString(),parser.guia);
        getGuia();

        Nodo nelse1 = new Nodo("CONDICION_SINO",else1.toString(),parser.guia);
        getGuia();

        Nodo ncb2 = new Nodo("OPER_AGRUP_LLF",cb2.toString(),parser.guia);
        getGuia();

        Nodo ncb3 = new Nodo("OPER_AGRUP_LLI",cb3.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nif1);
        raiz.addRaiz(npar1);
        raiz.addRaiz((Nodo)lcond1);
        raiz.addRaiz(npar2);
        raiz.addRaiz(ncb1);
        raiz.addRaiz((Nodo)ifcod1);
        raiz.addRaiz(ncb2);
        raiz.addRaiz(nelse1);
        raiz.addRaiz(ncb3);
        raiz.addRaiz((Nodo)elsecode1);
        raiz.addRaiz(ncb4);
        RESULT = raiz;      
       System.out.println("<CONDICIONALES>CONDICION_SI OPER_AGRUP_PI LISTA_CONDICIONES OPER_AGRUP_PF OPER_AGRUP_LLI CODIGO OPER_AGRUP_LLF CONDICION_SINO OPER_AGRUP_LLI CODIGO OPER_AGRUP_LLF"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERADOR_ARITMETICO ::= OPER_ART_DIV 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_DIV",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;        
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_DIV>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPERADOR_ARITMETICO ::= OPER_ART_MUL 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_MUL",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;     
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_MUL>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERADOR_ARITMETICO ::= OPER_ART_RESTA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_RESTA",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;        
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_RESTA>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPERADOR_ARITMETICO ::= OPER_ART_SUMA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_SUMA",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz; 
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_SUMA>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_VALOR ::= VALOR_LOG 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_LOG",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;         
        System.out.println("<TIPO_VALOR><VALOR_LOG>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO_VALOR ::= VALOR_STRING 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_STRING",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><VALOR_STRING>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO_VALOR ::= TIPO_VALOR_COMPATIBLE 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><TIPO_VALOR_COMPATIBLE>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO_VALOR_COMPATIBLE ::= NOMBRE_VAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia,sym);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><NOMBRE_VAR>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_VALOR_COMPATIBLE ::= VALOR_GRUPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_GRUPO",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;       
        System.out.println("<TIPO_VALOR><VALOR_GRUPO>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_VALOR_COMPATIBLE ::= VALOR_FLO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_FLO",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><VALOR_FLO>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_VALOR_COMPATIBLE ::= VALOR_ENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_ENT",n1.toString(),parser.guia);
        getGuia();  
        

        raiz.addRaiz(nd1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><TVALOR_ENT>");  
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VALOR_COMPATIBLE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_VALORES ::= TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES","",parser.guia);        
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;          
        System.out.println("<LISTA_VALORES><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTA_VALORES ::= LISTA_VALORES OPER_AGRUP_COMA TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;   
        System.out.println("<LISTA_VALORES><OPER_AGRUP_COMA><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION_GRUPO ::= LISTA_VARIABLES OPER_AGRUP_CI VALOR_ENT OPER_AGRUP_CF OPER_ASIG_IGUAL TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_CI",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("VALOR_ENT",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("OPER_AGRUP_CF",n3.toString(),parser.guia);
        getGuia(); 
        Nodo nd4 = new Nodo("OPER_ASIG_IGUALF",n4.toString(),parser.guia);
        getGuia(); 
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz(nd3);
        raiz.addRaiz(nd4);
        raiz.addRaiz((Nodo)raiz2);
        
        RESULT = raiz;         
        System.out.println("<ASIGNACION_GRUPO><LISTA_VARIABLES><OPER_AGRUP_CI><VALOR_ENT><OPER_AGRUP_CF><OPER_ASIG_IGUAL><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GRUPO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION_GRUPO ::= LISTA_VARIABLES OPER_ASIG_IGUAL OPER_AGRUP_LLI LISTA_VALORES OPERADOR_ARITMETICO LISTA_VALORES OPER_AGRUP_LLF 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("OPER_AGRUP_LLI",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("OPER_AGRUP_LLF",n3.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz((Nodo)raiz3);
        raiz.addRaiz((Nodo)raiz4);
        raiz.addRaiz(nd3);
        RESULT = raiz;        
        System.out.println("<ASIGNACION_GRUPO><LISTA_VARIABLES><OPER_ASIG_IGUAL><LISTA_VALORES><OPERADOR_ARITMETICO><LISTA_VALORES><OPER_AGRUP_LLF>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GRUPO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION_GRUPO ::= LISTA_VARIABLES OPER_ASIG_IGUAL OPER_AGRUP_LLI LISTA_VALORES OPER_AGRUP_LLF 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("OPER_AGRUP_LLI",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("OPER_AGRUP_LLF",n3.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd3);
        RESULT = raiz;        
        System.out.println("<ASIGNACION_GRUPO><LISTA_VARIABLES><OPER_ASIG_IGUAL><OPER_AGRUP_LLI><LISTA_VALORES><OPER_AGRUP_LLF>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_GRUPO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_VARIABLES ::= NOMBRE_VAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VARIABLES","",parser.guia);        
        getGuia();       
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia,sym);
        getGuia();   
          
             
        raiz.addRaiz(nd1);
       
        
        RESULT = raiz;
        System.out.println("<LISTA_VARIABLES><NOMBRE_VAR>");
        
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_VARIABLES ::= LISTA_VARIABLES OPER_AGRUP_COMA NOMBRE_VAR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VARIABLES","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd2 = new Nodo("NOMBRE_VAR",n2.toString(),parser.guia,sym);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);       
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);       
        
        RESULT = raiz;        
        System.out.println("<LISTA_VARIABLES><LISTA_VARIABLES><OPER_AGRUP_COMA><NOMBRE_VAR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VARIABLES",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA_VALORES_EXP ::= OPERADOR_ARITMETICO TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES_EXP","",parser.guia);        
        getGuia(); 
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;    
        System.out.println("<OPERADOR_ARITMETICO><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_EXP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA_VALORES_EXP ::= LISTA_VALORES_EXP OPERADOR_ARITMETICO TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_VALORES_EXP","",parser.guia);        
        getGuia(); 
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz((Nodo)raiz3);
        RESULT = raiz;         
        System.out.println("<LISTA_VALORES_EXP><LISTA_VALORES_EXP><OPERADOR_ARITMETICO><TIPO_VALOR>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_EXP",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP_BASICA ::= OPER_AGRUP_PI TIPO_VALOR LISTA_VALORES_EXP OPER_AGRUP_PF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_BASICA","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_AGRUP_PI",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("OPER_AGRUP_PF",n2.toString(),parser.guia);
        getGuia(); 
        
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd2);
        RESULT = raiz;         
        System.out.println("<EXP_BASICA>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_BASICA",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP_ASIGNACION ::= EXP_BASICA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1); 
        RESULT = raiz;         
        System.out.println("<EXP_ASIGNACION><EXP_BASICA>");     
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP_ASIGNACION ::= OPER_AGRUP_PI EXP_ASIGNACION OPERADOR_ARITMETICO EXP_BASICA OPER_AGRUP_PF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_AGRUP_PI",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("OPER_AGRUP_PF",n2.toString(),parser.guia);
        getGuia(); 
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz(nd2);
        RESULT = raiz;         
       System.out.println("<EXP_ASIGNACION>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP_ASIGNACION ::= EXP_ASIGNACION OPERADOR_ARITMETICO EXP_BASICA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  

        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    

        RESULT = raiz;         
       System.out.println("<EXP_ASIGNACION>");   
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP_ASIG_BASICA ::= EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1); 
        RESULT = raiz; 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP_ASIG_BASICA ::= TIPO_VALOR LISTA_VALORES_EXP 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        RESULT = raiz;         
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP_ASIG_BASICA ::= TIPO_VALOR LISTA_VALORES_EXP OPERADOR_ARITMETICO EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz((Nodo)raiz4);      
        RESULT = raiz;         
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP_ASIG_BASICA ::= OPER_AGRUP_PI TIPO_VALOR LISTA_VALORES_EXP OPERADOR_ARITMETICO EXP_ASIGNACION OPER_AGRUP_PF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int raiz3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz4left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz4right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz4 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_AGRUP_PI",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("OPER_AGRUP_PF",n2.toString(),parser.guia);
        getGuia(); 
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz((Nodo)raiz4);      
        raiz.addRaiz(nd2);
        RESULT = raiz;         
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXP_ASIG_BASICA ::= EXP_ASIG_BASICA EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        RESULT = raiz; 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP_ASIG_BASICA",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= LISTA_VARIABLES OPER_ASIG_IGUAL EXP_ASIG_BASICA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();        
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<ASIGNACION><LISTA_VARIABLES><OPER_ASIG_IGUAL><TIPO_VALOR><OPERADOR_ARITMETICO><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= LISTA_VARIABLES OPER_ASIG_IGUAL TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("ASIGNACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();  

        raiz.addRaiz((Nodo)raiz1);       
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        
        RESULT = raiz;
        System.out.println("<ASIGNACION><LISTA_VARIABLES><OPER_ASIG_IGUAL><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= PAL_VARIABLE ASIGNACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("PAL_VARIABLE",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;      
        System.out.println("<DECLARACION><PAL_VARIABLE><ASIGNACION>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= PAL_VARIABLE LISTA_VARIABLES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("PAL_VARIABLE",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;  
        
        
        System.out.println("<DECLARACION><PAL_VARIABLE> <LISTA_VARIABLES>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INDEX ::= EXP_ASIGNACION 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;
        System.out.println("<INDEX><EXP_ASIGNACION>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INDEX",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INDEX ::= NOMBRE_VAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia,sym);
        getGuia();

        raiz.addRaiz(nd1);       
        RESULT = raiz; 
        System.out.println("<INDEX><NOMBRE_VAR>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INDEX",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INDEX ::= VALOR_ENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_ENT",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        RESULT = raiz;  
        System.out.println("<INDEX><VALOR_ENT>"); 
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INDEX",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALOR_GRUPO ::= NOMBRE_VAR OPER_AGRUP_CI INDEX OPER_AGRUP_CF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia(); 
        
        Nodo nd1 = new Nodo("NOMBRE_VAR",n1.toString(),parser.guia);
        getGuia();
        
        Nodo nd2 = new Nodo("OPER_AGRUP_CI",n2.toString(),parser.guia);
        getGuia();
                
        Nodo nd3 = new Nodo("OPER_AGRUP_CF",n3.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd3);
        
        RESULT = raiz;           
        System.out.println("<VALOR_GRUPO><NOMBRE_VAR> <OPER_AGRUP_CI> <VALOR_ENT> <OPER_AGRUP_CF>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VALOR_GRUPO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_GRUPO ::= PAL_GRUPO ASIGNACION_GRUPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia(); 
        
        Nodo nd1 = new Nodo("PAL_GRUPO",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);        
        RESULT = raiz;    
        System.out.println("<DECLARACION_GRUPO><PAL_GRUPO> <ASIGNACION_GRUPO>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GRUPO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_GRUPO ::= PAL_GRUPO LISTA_VARIABLES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia();        
        
        Nodo nd1 = new Nodo("PAL_GRUPO",n1.toString(),parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        RESULT = raiz;         
        System.out.println("<DECLARACION_GRUPO><PAL_GRUPO> <LISTA_VARIABLES>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GRUPO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_IMPRECIONES ::= TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
       Nodo raiz = new Nodo("LISTA_IMPRECIONES","",parser.guia);        
       getGuia(); 
       raiz.addRaiz((Nodo)raiz1);
       RESULT = raiz;
       System.out.println("<LISTA_IMPRECIONES><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IMPRECIONES",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_IMPRECIONES ::= LISTA_IMPRECIONES OPER_AGRUP_COMA TIPO_VALOR 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LISTA_IMPRECIONES","",parser.guia);        
        getGuia();        
        
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);        
        RESULT = raiz;
        System.out.println("<LISTA_IMPRECIONES><LISTA_IMPRECIONES><OPER_AGRUP_COMA><TIPO_VALOR>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IMPRECIONES",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPRIMIR_DATO ::= IMPRIMIR OPER_AGRUP_PI LISTA_IMPRECIONES OPER_AGRUP_PF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("IMPRIMIR_DATO","",parser.guia);        
        getGuia();       
        
        Nodo nd1 = new Nodo("IMPRIMIR",n1.toString(),parser.guia);
        getGuia();  
        
        Nodo nd2 = new Nodo("OPER_AGRUP_PI",n2.toString(),parser.guia);
        getGuia(); 
        
        Nodo nd3 = new Nodo("OPER_AGRUP_PF",n3.toString(),parser.guia);
        getGuia(); 

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz(nd3);

        RESULT = raiz;
        System.out.println("<IMPRIMIR_DATO><IMPRIMIR><OPER_AGRUP_PI><LISTA_IMPRECIONES><OPER_AGRUP_PF>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR_DATO",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LEER_DATO ::= LEER NOMBRE_VAR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("LEER_DATO","",parser.guia);
        getGuia();
        
        Nodo nd1 = new Nodo("LEER",n1.toString(),parser.guia);
        getGuia();

        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd2 = new Nodo("NOMBRE_VAR",n2.toString(),parser.guia,sym);
        getGuia();
        
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);

        RESULT = raiz;
        System.out.println("<LEER>");
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LEER_DATO",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INC_DEC ::= OPER_ASIG_InDe NOMBRE_VAR PUNTOYCOMA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ASIGNACION_INC_DEC","",parser.guia);
            getGuia();
            
            Nodo nd1 = new Nodo("INC/DEC",n1.toString(),parser.guia);
            getGuia();

            Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
            Nodo nd2 = new Nodo("NOMBRE_VAR",n2.toString(),parser.guia,sym);            
            getGuia();

            Nodo nd3 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();
            
            raiz.addRaiz(nd1);
            raiz.addRaiz(nd2);
            raiz.addRaiz(nd3);
            

            RESULT = raiz;
            System.out.println("[INCREMENTO DECREMENTO]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INC_DEC",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURAS ::= C_REPETIR PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("<CICLO REPETIR>");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURAS ::= C_MIENTRAS PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("<CICLO MIENTRAS>");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURAS ::= CONDICIONALES PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("<CONDICIONALES>");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURAS ::= INC_DEC 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            RESULT = raiz;
            System.out.println("<INC_DEC>");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURAS ::= ASIGNACION_GRUPO PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("[ASIGNACION GRUPO]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURAS ::= DECLARACION_GRUPO PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("[DECLARACION_GRUPO]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURAS ::= ASIGNACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("[ASIGNACION]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURAS ::= DECLARACION PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("[DECLARACION]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURAS ::= LEER_DATO PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		  
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
            System.out.println("[LEER]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURAS ::= IMPRIMIR_DATO PUNTOYCOMA 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();
            
            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);
            
            RESULT = raiz;
            System.out.println("[IMPRIMIR]");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURAS",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= ESTRUCTURAS 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
       Nodo raiz = new Nodo("CODIGO","",parser.guia);
       getGuia(); 

       raiz.addRaiz((Nodo) raiz1);
       RESULT = raiz;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= CODIGO ESTRUCTURAS 
            {
              Object RESULT =null;
		int raiz1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int raiz1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object raiz1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int raiz2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int raiz2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object raiz2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo raiz = new Nodo("CODIGO","",parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo) raiz1);
        raiz.addRaiz((Nodo) raiz2);
        
        RESULT = raiz;
        
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= CODIGO 
            {
              Object RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object prog = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
        Nodo n1 = new Nodo("INIT","",parser.guia);
        getGuia();
        n1.addRaiz((Nodo) prog);
        parser.nodoPrincipal = (Nodo) n1;
        RESULT = n1;
    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


     
}
