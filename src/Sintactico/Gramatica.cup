package Sintactico;
import java_cup.runtime.*;
import Lexico.PaintTextBox;
action code {:
    
:}
parser code
{:
    public Symbol simboloAnterior;
    public Nodo nodoPrincipal;
    public PaintTextBox estilo = new PaintTextBox();
    private int guia = 0;
    private int conError = 0;
    public String textError = "";
    private int charError = 0;
    
    private int charCode = 0;
    public int charErrorDetec(){
        return charCode;
    }
    private void getGuia(){
        guia++;
    }

    

     public void syntax_error(Symbol cur_token) {
        //report_error("Syntax error", cur_token); 
        
        if(cur_token.sym != 0){
            Scanner s = getScanner();
        
        
        report_error("Syntax error", cur_token); 
        this.charCode = cur_token.left;
        
        conError++;

        String m = "Error "+conError+": \n";
        int l = cur_token.right;
        String v = cur_token.value.toString();

        textError += m+"\tLinea: "+l+"\n\tCerca de: "+v+"\n";

        int tam =textError.length();
        estilo.insertarCodigo(textError);        
        estilo.pintaRojoFuerte(charError,tam);

        charError += tam;
        }

    }
:}


terminal
    VARIABLE,
    IF_STATEMENT,
    ELSE_STATEMENT,
    IDENTIFIER,
    NUMBER_INTEGER,
    SEMICOLON,
    NUMBER_FLOAT,
    VAL_TEXT,
    PAREN_OPEN,
    PAREN_CLOSE, 
    CURLY_BRACE_OPEN,
    CURLY_BRACE_CLOSE,
    PAL_GRUPO,
    LEER,
    IMPRIMIR,
    CICLO_REPETIR,
    REPETIR_HASTA,
    REPETIR_FIN,
    CICLO_MIENTRAS,
    INICIO_CICLO,
    FIN_MIENTRAS,
    CONDICION_INICIO,
    CONDICION_FIN,
    OPER_REL,
    OPER_ART_SUMA,
    OPER_ART_RESTA,
    OPER_ART_MUL,
    OPER_ART_DIV,
    OPER_ASIG_IGUAL,
    OPER_ASIG_InDe,
    OPER_AGRUP_CI,
    OPER_AGRUP_CF,
    OPER_AGRUP_COMA,
    VALOR_LOG,
    ERROR;

non terminal INIT,CODIGO;
//Declarar y/o Asignar
non terminal ESTRUCTURAS, DECLARACION,LISTA_VARIABLES, ASIGNACION, EXP_ASIGNACION,INC_DEC,EXP_BASICA;

//Tipo Array
//Declarar Array
non terminal DECLARACION_GRUPO, ASIGNACION_GRUPO, LISTA_VALORES,VALOR_GRUPO,INDEX;

non terminal CONDICIONALES,LISTA_CONDICIONES,CONDICION_ALTA,CONDICION_MEDIA,CONDICION_BAJA;

//Ciclos
non terminal C_MIENTRAS,C_REPETIR;
//Generales
non terminal TIPO_VALOR, OPERADOR_ARITMETICO,VARIABLE_DA,R_INCDEC,LEER_DATO,IMPRIMIR_DATO,LISTA_IMPRECIONES,TIPO_VALOR_COMPATIBLE,LISTA_VALORES_EXP,EXP_ASIG_BASICA,EXP_ASIG_COMPLEJA;

//Declaracion, Asignacion en ciclos
non terminal DECL_ASIG_CICLO, ASIGNACION_CICLO,ASIG_CICLO;

start with INIT;

INIT ::= CODIGO:prog
    {:
        Nodo n1 = new Nodo("INIT","",parser.guia);
        getGuia();
        n1.addRaiz((Nodo) prog);
        parser.nodoPrincipal = (Nodo) n1;
        RESULT = n1;
    :};

CODIGO ::= CODIGO:raiz1 ESTRUCTURAS:raiz2
    {:
        Nodo raiz = new Nodo("CODIGO","",parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo) raiz1);
        raiz.addRaiz((Nodo) raiz2);
        
        RESULT = raiz;
        
    :} | ESTRUCTURAS:raiz1
    {:
       Nodo raiz = new Nodo("CODIGO","",parser.guia);
       getGuia(); 

       raiz.addRaiz((Nodo) raiz1);
       RESULT = raiz;
    :};

ESTRUCTURAS ::= 
        IMPRIMIR_DATO:raiz1 SEMICOLON
        {:
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();
            
            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);
            
            RESULT = raiz;
        :}
        |DECLARACION:raiz1 SEMICOLON {:
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        :} | ASIGNACION:raiz1 SEMICOLON 
        {:
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        :} | DECLARACION_GRUPO:raiz1 SEMICOLON
        {:
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        :}|ASIGNACION_GRUPO:raiz1 SEMICOLON
        {:
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        :}
        |INC_DEC:raiz1
        {:
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            RESULT = raiz;
        :}
        | CONDICIONALES:raiz1 SEMICOLON
         {:
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        :}|C_MIENTRAS:raiz1 SEMICOLON
        {:
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        :}|C_REPETIR:raiz1 SEMICOLON
        {:
            Nodo raiz = new Nodo("ESTRUCTURAS","",parser.guia);
            getGuia();
            
            Nodo n1 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();

            raiz.addRaiz((Nodo)raiz1);
            raiz.addRaiz(n1);

            RESULT = raiz;
        :};
INC_DEC ::= OPER_ASIG_InDe:n1 IDENTIFIER:n2 SEMICOLON
        {:
            Nodo raiz = new Nodo("ASIGNACION_INC_DEC","",parser.guia);
            getGuia();
            
            Nodo nd1 = new Nodo("INC/DEC",n1.toString(),parser.guia);
            getGuia();

            Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
            Nodo nd2 = new Nodo("IDENTIFIER",n2.toString(),parser.guia,sym);            
            getGuia();

            Nodo nd3 = new Nodo("PUNTO Y COMO",";",parser.guia);
            getGuia();
            
            raiz.addRaiz(nd1);
            raiz.addRaiz(nd2);
            raiz.addRaiz(nd3);
            

            RESULT = raiz;
        :};



LEER_DATO ::= LEER:n1 IDENTIFIER:n2 
    {:
        Nodo raiz = new Nodo("LEER_DATO","",parser.guia);
        getGuia();
        
        Nodo nd1 = new Nodo("LEER",n1.toString(),parser.guia);
        getGuia();

        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd2 = new Nodo("IDENTIFIER",n2.toString(),parser.guia,sym);
        getGuia();
        
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);

        RESULT = raiz;
    :};

IMPRIMIR_DATO ::= IMPRIMIR:n1 PAREN_OPEN:n2 LISTA_IMPRECIONES:raiz1 PAREN_CLOSE:n3
    {:
        Nodo raiz = new Nodo("IMPRIMIR_DATO","",parser.guia);        
        getGuia();       
        
        Nodo nd1 = new Nodo("IMPRIMIR",n1.toString(),parser.guia);
        getGuia();  
        
        Nodo nd2 = new Nodo("PAREN_OPEN",n2.toString(),parser.guia);
        getGuia(); 
        
        Nodo nd3 = new Nodo("PAREN_CLOSE",n3.toString(),parser.guia);
        getGuia(); 

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz(nd3);

        RESULT = raiz;
    :};


LISTA_IMPRECIONES ::= LISTA_IMPRECIONES:raiz1 OPER_AGRUP_COMA:n1 TIPO_VALOR:raiz2
    {:
        Nodo raiz = new Nodo("LISTA_IMPRECIONES","",parser.guia);        
        getGuia();        
        
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);        
        RESULT = raiz;
    :}
    |TIPO_VALOR:raiz1
    {:
       Nodo raiz = new Nodo("LISTA_IMPRECIONES","",parser.guia);        
       getGuia(); 
       raiz.addRaiz((Nodo)raiz1);
       RESULT = raiz;
    :};

DECLARACION_GRUPO ::= PAL_GRUPO:n1 LISTA_VARIABLES:raiz1
    {:
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia();        
        
        Nodo nd1 = new Nodo("PAL_GRUPO",n1.toString(),parser.guia);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        RESULT = raiz;         
        System.out.println("<DECLARACION_GRUPO><PAL_GRUPO> <LISTA_VARIABLES>");
    :}
    | PAL_GRUPO:n1 ASIGNACION_GRUPO:raiz1
    {:
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia(); 
        
        Nodo nd1 = new Nodo("PAL_GRUPO",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);        
        RESULT = raiz;    
        System.out.println("<DECLARACION_GRUPO><PAL_GRUPO> <ASIGNACION_GRUPO>");
    :};

VALOR_GRUPO ::= IDENTIFIER:n1 OPER_AGRUP_CI:n2 INDEX:raiz1 OPER_AGRUP_CF:n3
    {:
        Nodo raiz = new Nodo("DECLARACION_GRUPO","",parser.guia);        
        getGuia(); 
        
        Nodo nd1 = new Nodo("IDENTIFIER",n1.toString(),parser.guia);
        getGuia();
        
        Nodo nd2 = new Nodo("OPER_AGRUP_CI",n2.toString(),parser.guia);
        getGuia();
                
        Nodo nd3 = new Nodo("OPER_AGRUP_CF",n3.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd3);
        
        RESULT = raiz;
    :};

INDEX ::= NUMBER_INTEGER:n1
    {:
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("NUMBER_INTEGER",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        RESULT = raiz;
    :}
    |IDENTIFIER:n1
    {:
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("NIDENTIFIER",n1.toString(),parser.guia,sym);
        getGuia();

        raiz.addRaiz(nd1);       
        RESULT = raiz; 
    :}
    |EXP_ASIGNACION:raiz1
    {:
        Nodo raiz = new Nodo("INDEX","",parser.guia);        
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;
        System.out.println("<INDEX><EXP_ASIGNACION>");
    :};

DECLARACION ::= VARIABLE:n1 LISTA_VARIABLES:raiz1
    {:
        Nodo raiz = new Nodo("DECLARACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("VARIABLE",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;  
        
        
        System.out.println("<DECLARACION><VARIABLE> <LISTA_VARIABLES>");
    :}
    | VARIABLE:n1 ASIGNACION:raiz1
    {:
        Nodo raiz = new Nodo("DECLARACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("VARIABLE",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);       
        raiz.addRaiz((Nodo)raiz1);       
        RESULT = raiz;      
        System.out.println("<DECLARACION><VARIABLE><ASIGNACION>");
    :};


ASIGNACION ::= LISTA_VARIABLES:raiz1 OPER_ASIG_IGUAL:n1 TIPO_VALOR:raiz2
    {:
        Nodo raiz = new Nodo("ASIGNACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();  

        raiz.addRaiz((Nodo)raiz1);       
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        
        RESULT = raiz;
        System.out.println("<ASIGNACION><LISTA_VARIABLES><OPER_ASIG_IGUAL><TIPO_VALOR>");
    :}
    |LISTA_VARIABLES:raiz1 OPER_ASIG_IGUAL:n1 EXP_ASIG_BASICA:raiz2
    {:
        Nodo raiz = new Nodo("ASIGNACION","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();        
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<ASIGNACION><LISTA_VARIABLES><OPER_ASIG_IGUAL><TIPO_VALOR><OPERADOR_ARITMETICO><TIPO_VALOR>");
    :}; 





EXP_ASIG_BASICA ::= 
    EXP_ASIG_BASICA:raiz1 EXP_ASIGNACION:raiz2
    {:
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        RESULT = raiz; 
    :}
    |PAREN_OPEN:n1  TIPO_VALOR:raiz1 LISTA_VALORES_EXP:raiz2 OPERADOR_ARITMETICO:raiz3 EXP_ASIGNACION:raiz4 PAREN_CLOSE:n2
    {:
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("PAREN_OPEN",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("PAREN_CLOSE",n2.toString(),parser.guia);
        getGuia(); 
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz((Nodo)raiz4);      
        raiz.addRaiz(nd2);
        RESULT = raiz;         
    :}
    |TIPO_VALOR:raiz1 LISTA_VALORES_EXP:raiz2 OPERADOR_ARITMETICO:raiz3 EXP_ASIGNACION:raiz4
    {:
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz((Nodo)raiz4);      
        RESULT = raiz;         
    :}
    |TIPO_VALOR:raiz1 LISTA_VALORES_EXP:raiz2
    {:
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        RESULT = raiz;         
    :}|EXP_ASIGNACION:raiz1{:
        Nodo raiz = new Nodo("EXP_ASIG_BASICA","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1); 
        RESULT = raiz; 
    :};


EXP_ASIGNACION ::= EXP_ASIGNACION:raiz1 OPERADOR_ARITMETICO:raiz2 EXP_BASICA:raiz3
    {:
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  

        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    

        RESULT = raiz;         
       System.out.println("<EXP_ASIGNACION>");   
    :}
    |PAREN_OPEN:n1 EXP_ASIGNACION:raiz1 OPERADOR_ARITMETICO:raiz2 EXP_BASICA:raiz3 PAREN_CLOSE:n2
    {:
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("PAREN_OPEN",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("PAREN_CLOSE",n2.toString(),parser.guia);
        getGuia(); 
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);    
        raiz.addRaiz((Nodo)raiz2);    
        raiz.addRaiz((Nodo)raiz3);    
        raiz.addRaiz(nd2);
        RESULT = raiz;         
       System.out.println("<EXP_ASIGNACION>");   
    :}    
    |EXP_BASICA:raiz1
    {:
        Nodo raiz = new Nodo("EXP_ASIGNACION","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1); 
        RESULT = raiz;         
        System.out.println("<EXP_ASIGNACION><EXP_BASICA>");     
    :};

EXP_BASICA ::=         
    PAREN_OPEN:n1 TIPO_VALOR:raiz1 LISTA_VALORES_EXP:raiz2 PAREN_CLOSE:n2
    {:
        Nodo raiz = new Nodo("EXP_BASICA","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("PAREN_OPEN",n1.toString(),parser.guia);
        getGuia();  
        Nodo nd2 = new Nodo("PAREN_CLOSE",n2.toString(),parser.guia);
        getGuia(); 
        
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd2);
        RESULT = raiz;         
        System.out.println("<EXP_BASICA>");   
    :};

LISTA_VALORES_EXP ::= 
    LISTA_VALORES_EXP: raiz1 OPERADOR_ARITMETICO:raiz2 TIPO_VALOR:raiz3
    {:
        Nodo raiz = new Nodo("LISTA_VALORES_EXP","",parser.guia);        
        getGuia(); 
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz((Nodo)raiz3);
        RESULT = raiz;         
        System.out.println("<LISTA_VALORES_EXP><LISTA_VALORES_EXP><OPERADOR_ARITMETICO><TIPO_VALOR>");   
    :}    
    |OPERADOR_ARITMETICO:raiz1 TIPO_VALOR:raiz2
    {:
        Nodo raiz = new Nodo("LISTA_VALORES_EXP","",parser.guia);        
        getGuia(); 
        raiz.addRaiz((Nodo)raiz1);        
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;    
        System.out.println("<OPERADOR_ARITMETICO><TIPO_VALOR>");
    :};




LISTA_VARIABLES ::= LISTA_VARIABLES:raiz1 OPER_AGRUP_COMA:n1 IDENTIFIER:n2
    {:
        Nodo raiz = new Nodo("LISTA_VARIABLES","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd2 = new Nodo("IDENTIFIER",n2.toString(),parser.guia,sym);
        getGuia();
        
        raiz.addRaiz((Nodo)raiz1);       
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);       
        
        RESULT = raiz;
    :}|IDENTIFIER:n1
    {:
        Nodo raiz = new Nodo("LISTA_VARIABLES","",parser.guia);        
        getGuia();       
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        
        Nodo nd1 = new Nodo("IDENTIFIER",n1.toString(),parser.guia,sym);
        getGuia();   
          
             
        raiz.addRaiz(nd1);
       
        
        RESULT = raiz;
        
    :};



ASIGNACION_GRUPO ::= LISTA_VARIABLES:raiz1 OPER_ASIG_IGUAL:n1 CURLY_BRACE_OPEN:n2 LISTA_VALORES:raiz2 CURLY_BRACE_CLOSE:n3
    {:
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("CURLY_BRACE_OPEN",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("CURLY_BRACE_CLOSE",n3.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz(nd3);
        RESULT = raiz;
    :}
    |LISTA_VARIABLES:raiz1 OPER_ASIG_IGUAL:n1 CURLY_BRACE_OPEN:n2 LISTA_VALORES:raiz2 OPERADOR_ARITMETICO:raiz3 LISTA_VALORES:raiz4 CURLY_BRACE_CLOSE:n3
    {:
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_ASIG_IGUAL",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("CURLY_BRACE_OPEN",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("CURLY_BRACE_CLOSE",n3.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz((Nodo)raiz2);
        raiz.addRaiz((Nodo)raiz3);
        raiz.addRaiz((Nodo)raiz4);
        raiz.addRaiz(nd3);
        RESULT = raiz;
    :}
    |LISTA_VARIABLES:raiz1 OPER_AGRUP_CI:n1 NUMBER_INTEGER:n2 OPER_AGRUP_CF:n3 OPER_ASIG_IGUAL:n4 TIPO_VALOR:raiz2
    {:
        Nodo raiz = new Nodo("ASIGNACION_GRUPO","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_CI",n1.toString(),parser.guia);
        getGuia();   
        Nodo nd2 = new Nodo("NUMBER_INTEGER",n2.toString(),parser.guia);
        getGuia();  
        Nodo nd3 = new Nodo("OPER_AGRUP_CF",n3.toString(),parser.guia);
        getGuia(); 
        Nodo nd4 = new Nodo("OPER_ASIG_IGUALF",n4.toString(),parser.guia);
        getGuia(); 
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz(nd2);        
        raiz.addRaiz(nd3);
        raiz.addRaiz(nd4);
        raiz.addRaiz((Nodo)raiz2);
        
        RESULT = raiz;
    :};

LISTA_VALORES ::= LISTA_VALORES:raiz1 OPER_AGRUP_COMA:n1 TIPO_VALOR:raiz2
    {:
        Nodo raiz = new Nodo("LISTA_VALORES","",parser.guia);        
        getGuia();       
        Nodo nd1 = new Nodo("OPER_AGRUP_COMA",n1.toString(),parser.guia);
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;   
        System.out.println("<LISTA_VALORES><OPER_AGRUP_COMA><TIPO_VALOR>");
    :}
    |TIPO_VALOR:raiz1
    {:
        Nodo raiz = new Nodo("LISTA_VALORES","",parser.guia);        
        getGuia();  
        
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;          
        System.out.println("<LISTA_VALORES><TIPO_VALOR>");
    :};
TIPO_VALOR_COMPATIBLE ::= 
    NUMBER_INTEGER:n1
    {:
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_ENT",n1.toString(),parser.guia);
        getGuia();  
        

        raiz.addRaiz(nd1);
        RESULT = raiz;
    :}|NUMBER_FLOAT:n1
     {:
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("NUMBER_FLOAT",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz; 
    :}
    |VALOR_GRUPO:n1
    {:
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_GRUPO",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;       
        System.out.println("<TIPO_VALOR><VALOR_GRUPO>");  
    :}
    | IDENTIFIER:n1
    {:
        Nodo raiz = new Nodo("TIPO_VALOR_COMPATIBLE","",parser.guia);        
        getGuia();  
        Symbol sym = new Symbol(((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).sym, n1left, n1right);
        Nodo nd1 = new Nodo("IDENTIFIER",n1.toString(),parser.guia,sym);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;
    :}
    ;

TIPO_VALOR ::= 
    TIPO_VALOR_COMPATIBLE:raiz1
    {:
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;        
        System.out.println("<TIPO_VALOR><TIPO_VALOR_COMPATIBLE>");  
    :}
     |VAL_TEXT:n1
     {:
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VAL_TEXT",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;
    :}|VALOR_LOG:n1
    {:
        Nodo raiz = new Nodo("TIPO_VALOR","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("VALOR_LOG",n1.toString(),parser.guia);
        getGuia();  
        raiz.addRaiz(nd1);
        RESULT = raiz;         
        System.out.println("<TIPO_VALOR><VALOR_LOG>");  
    :};


OPERADOR_ARITMETICO ::= OPER_ART_SUMA:n1
    {:
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_SUMA",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz; 
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_SUMA>"); 
    :}| OPER_ART_RESTA:n1 
    {:
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_RESTA",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;        
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_RESTA>"); 
    :}| OPER_ART_MUL:n1 
    {:
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_MUL",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;     
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_MUL>"); 
    :}| OPER_ART_DIV:n1
    {:
        Nodo raiz = new Nodo("OPERADOR_ARITMETICO","",parser.guia);        
        getGuia();  
        Nodo nd1 = new Nodo("OPER_ART_DIV",n1.toString(),parser.guia);
        getGuia();   
        
        raiz.addRaiz(nd1);
        RESULT = raiz;        
       System.out.println("<OPERADOR_ARITMETICO><OPER_ART_DIV>"); 
    :};


CONDICIONALES ::= 
    IF_STATEMENT:if1
    PAREN_OPEN:par1
    LISTA_CONDICIONES:lcond1
    PAREN_CLOSE:par2
    CURLY_BRACE_OPEN:cb1
    CODIGO:ifcod1
    CURLY_BRACE_CLOSE:cb2
    ELSE_STATEMENT:else1
    CURLY_BRACE_OPEN:cb3
    CODIGO:elsecode1
    CURLY_BRACE_CLOSE:cb4 
    {:
        Nodo raiz = new Nodo("CONDICIONALES","",parser.guia);        
        getGuia(); 

        Nodo nif1 = new Nodo("IF_STATEMENT",if1.toString(),parser.guia);
        getGuia();

        Nodo npar1 = new Nodo("PAREN_OPEN",par1.toString(),parser.guia);
        getGuia();

        Nodo npar2 = new Nodo("PAREN_CLOSE",par2.toString(),parser.guia);
        getGuia();

        Nodo ncb1 = new Nodo("BEGIN_IF",cb1.toString(),parser.guia);
        getGuia();

        Nodo ncb2 = new Nodo("CURLY_BRACE_CLOSE",cb2.toString(),parser.guia);
        getGuia();

        Nodo nelse1 = new Nodo("ELSE_STATEMENT",else1.toString(),parser.guia);
        getGuia();

        Nodo ncb3 = new Nodo("BEGIN_ELSE",cb3.toString(),parser.guia);
        getGuia();

        Nodo ncb4 = new Nodo("END_ELSE",cb4.toString(),parser.guia);
        getGuia();

        

        raiz.addRaiz(nif1);
        raiz.addRaiz(npar1);
        raiz.addRaiz((Nodo)lcond1);
        raiz.addRaiz(npar2);
        raiz.addRaiz(ncb1);
        raiz.addRaiz((Nodo)ifcod1);
        raiz.addRaiz(ncb2);
        raiz.addRaiz(nelse1);
        raiz.addRaiz(ncb3);
        raiz.addRaiz((Nodo)elsecode1);
        raiz.addRaiz(ncb4);
        RESULT = raiz;
    :};

LISTA_CONDICIONES ::= CONDICION_ALTA:raiz1 
    {:
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion alta>CONDICION_ALTA ");
    :}
    |CONDICION_MEDIA:raiz1 
    {: 
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion media>CONDICION_MEDIA ");
    :}
    |CONDICION_BAJA:raiz1 
    {:
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        RESULT = raiz;
        System.out.println("<condicion baja> CONDICION_BAJA ");
    :}
    |LISTA_CONDICIONES:raiz1 CONDICION_ALTA:raiz2 
    {:
        Nodo raiz = new Nodo("LISTA_CONDICIONES","",parser.guia);        
        getGuia();
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<lista><condicion alta>CONDICION_ALTA ");
    :}
    ;

CONDICION_ALTA ::= CONDICION_MEDIA:raiz1 OPER_REL:n1 CONDICION_MEDIA:raiz2 
    {:
        Nodo raiz = new Nodo("CONDICION_ALTA","",parser.guia);        
        getGuia();
        Nodo nd1 = new Nodo("OPER_REL",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<CONDICION_ALTA>CONDICION_MEDIA OPER_REL CONDICION_MEDIA");
    :};

CONDICION_MEDIA ::= PAREN_OPEN:n1 CONDICION_BAJA:raiz1 PAREN_CLOSE:n2
    {:
        Nodo raiz = new Nodo("CONDICION_MEDIA","",parser.guia);        
        getGuia();

        Nodo nd1 = new Nodo("PAREN_OPEN",n1.toString(),parser.guia);
        getGuia();
        Nodo nd2 = new Nodo("PAREN_CLOSE",n2.toString(),parser.guia);
        getGuia();

        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd2);
        RESULT = raiz;
    :};

CONDICION_BAJA ::= TIPO_VALOR:raiz1 OPER_REL:n1 TIPO_VALOR:raiz2 
    {:
        Nodo raiz = new Nodo("CONDICION_BAJA","",parser.guia);        
        getGuia();

        Nodo nd1 = new Nodo("OPER_REL",n1.toString(),parser.guia);
        getGuia();

        raiz.addRaiz((Nodo)raiz1);
        raiz.addRaiz(nd1);
        raiz.addRaiz((Nodo)raiz2);
        RESULT = raiz;
        System.out.println("<CONDICION_BAJA>TIPO_VALOR OPER_REL TIPO_VALOR");
    :};
